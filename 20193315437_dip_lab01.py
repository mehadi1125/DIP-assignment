# -*- coding: utf-8 -*-
"""20193315437_DIP_Lab01.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1NIDi7oQ5CQpBnM-pWAZF1ieZRiFMbxOA

# Importing kaggle dataset to colab
"""

! pip install kaggle

"""**Mounting the google drive to store kaggle API**"""

from google.colab import drive
drive.mount('/content/drive')

"""**Now, making a directory for kaggle dataset at the temporary instance location**"""

! mkdir ~/.kaggle

"""**Uploading the json file to google drive and then copy to the temporary instance location**"""

!cp '/content/drive/MyDrive/DIP/kaggle.json' ~/.kaggle/

"""**Changing the file permission to read/write to the owner only**"""

! chmod 600 ~/.kaggle/kaggle.json

"""**Download Dataset**"""

! kaggle datasets download -p /content/kaggle_data tenxengineers/denoising-dataset-multiple-iso-levels

"""**Unzipping dataset**"""

! unzip /content/kaggle_data/denoising-dataset-multiple-iso-levels.zip -d /content/kaggle_data/denoising-dataset-multiple-iso-levels

"""# Image_IO"""

from skimage import io

"""**Load a noisy image using skimage**"""

noisy_image = io.imread("/content/kaggle_data/denoising-dataset-multiple-iso-levels/AlphaISP - Denoising Dataset/AlphaISP - Denoising Dataset/PNG Data/2DNR Denoising/Noised/AlphaISP_2592x1536_8bits_Scene23.png")

noisy_image

"""**Import Necessary Libraries**"""

import os
import numpy as np
import matplotlib.pyplot as plt
from skimage import io
import cv2

"""**Function to display an image with a title using matplotlib**"""

def show_image(title, image):
    plt.figure(figsize=(10, 10))
    plt.imshow(cv2.cvtColor(image, cv2.COLOR_BGR2RGB))
    plt.title(title)
    plt.axis('off')
    plt.show()

"""**Create a list of image paths**"""

txt_files = []
for root, dirs, files in os.walk("/content/kaggle_data/denoising-dataset-multiple-iso-levels/AlphaISP - Denoising Dataset/AlphaISP - Denoising Dataset"):
    for file in files:
        if file.endswith("AlphaISP_2592x1536_8bits_Scene1.png"):
            txt_files.append(os.path.join(root, file))

"""**Read the images**"""

images = [cv2.imread(file) for file in txt_files]

"""**Noise Reduction by averaging (Addition and division)**"""

def noise_reduction(images):
    if len(images) == 0:
        return None
    sum_image = np.zeros_like(images[0], dtype=np.float32)
    for image in images:
        sum_image += image.astype(np.float32)  # Addition
    avg_image = (sum_image / len(images)).astype(np.uint8)  # Division (to average)
    return avg_image

"""**Change Detection by subtracting the first image from the second image (Subtraction)**"""

def change_detection(image1, image2):
    return cv2.absdiff(image1, image2)  # Subtraction

"""**Masking an image with a binary mask (Multiplication)**"""

def apply_mask(image, mask):
    return cv2.bitwise_and(image, image, mask=mask)  # Multiplication

"""**Perfoming Noise Reduction, Chnage Detection and Masking**"""

# Display the original image
if len(images) > 0:
    show_image('Original Image', images[0])

# Perform Noise Reduction
reduced_noise_image = noise_reduction(images)
if reduced_noise_image is not None:
    show_image('Noise Reduced Image', reduced_noise_image)

# Perform Change Detection (using the first two images for demonstration)
if len(images) > 1:
    change_detected_image = change_detection(images[0], images[1])
    show_image('Change Detected Image', change_detected_image)

# Perform Masking (using a random mask for demonstration)
if len(images) > 0:
    mask = np.zeros_like(images[0][:, :, 0], dtype=np.uint8)
    cv2.rectangle(mask, (50, 50), (200, 200), 255, -1)  # Example mask
    masked_image = apply_mask(images[0], mask)
    show_image('Mask', mask)
    show_image('Masked Image', masked_image)

